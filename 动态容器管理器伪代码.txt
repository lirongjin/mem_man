dcm_alloc(dcm, size)
{
    container = dcm.select_ctn(size);
    for (; container != null; container = container.next()) {
        p = container.alloc(size);
        if (p) {
            return p;
        }
    }
    return null;
}

container::alloc(container, size)
{
    for (chunk = container.head(); chunk != null; chunk = chunk.next()) {
        if (chunk.hole_size() >= size) {
            p = chunk.alloc(size);
            return p;
        }
    }
    return null;
}

chunk::alloc(chunk, size)
{
    p = chunk.get_pointer();
    if (chunk.is_split(size)) {
        chunk.splite(size);
        return p;
    } else {
        chunk.del();
    }
    return p;
}

chunk::split(chunk, size)
{
    remain_chunk = chunk.reserve(size);
    chunk.dcm.add_chunk(remain_chunk);
    chunk.del();
}

chunk::del(chunk)
{
    chunk.prev.next = chunk.next;
    chunk.next.prev = chunk.prev;
}

dcm_free(pointer)
{
    chunk = pointer.to_chunk();
    if (chunk.lnb.is_free()) {
        chunk.lnb.del();
        chunk.add(chunk.lnb);
    }
    if (chunk.rnb.is_free()) {
        chunk.rnb.del();
        chunk.add(chunk.rnb);
    }
    dcm.add_chunk(chunk);
}

dcm::add_chunk(dcm, chunk)
{
    container = dcm.select_ctn(chunk);
    container.add_chunk(chunk);
}

container::add_chunk(container, chunk)
{
    head = container.head();
    head.next.prev = chunk.node;
    chunk.node.next = head.next;
    head.next = chunk.node;
    chunk.prev = head;
}

dcm_init(dcm, buffer)
{
    chunk = dcm_transfer(buffer);
    dcm_add_chunk(chunk);
}


