lcm_alloc(lcm, size)
{
    container = lcm.select_ctn(size);
    pointer = container.alloc();
    return pointer;
}

container::alloc(container)
{
    if (container.no_empty()) {
        meta = container.get_free_meta;
        chunk = container.get_chunk(meta);
        meta.set_used();
        return chunk.pointer();
    } else {
        return null;
    }
}

lcm_free(lcm, pointer)
{
    container = lcm.get_container(pointer);
    container.free(pointer);
}

container::free(container, pointer)
{
    meta = container.get_meta(pointer);
    meta.set_free();
}

lcm_init(lcm, bufferr)
{
    container = lcm.head();
    for (; container != null; container = container->next()) {
        remain = container_init(container, buffer);
        buffer.reduce(remain);
    }
}

container::init(container, buffer)
{
    used_size = min(container.chunk_count * container.chunk_size, buffer.size);
    container.chunk_count = used_size / container.chunk_size;
    for (i = 0; i < container.chunk_count; i++) {
        chunk[i].meta.set_free();
    }
    return buffer.size - used_size;
}

